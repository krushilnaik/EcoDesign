import React from 'react';
import ReactDOM from 'react-dom';

class ImageCarousel extends React.Component {
	constructor(props) {
		super(props);

		this.state = {activeImage: 0};
		this.images = this.props.images;
	}

	/**
	 * @param {number} increment 
	 */
	clickHandler(increment) {
		this.setState(
			prevState => (
				{activeImage: prevState.activeImage + increment}
			)
		);
	}

	render() {
		/**
		 * @type {React.CSSProperties}
		 */
		const arrowStyle = {
			fontSize: "2rem",
			gridRow: "2 / 3",
			zIndex: 9000
		};

		let leftArrow = <i className="fas fa-chevron-circle-left" style={{...arrowStyle, gridColumn: 1}} onClick={() => this.clickHandler(-1)}></i>;
		let rightArrow = <i className="fas fa-chevron-circle-right"  style={{...arrowStyle, gridColumn: -1}} onClick={() => this.clickHandler(1)}></i>;

		const regex = /file[/]d[/](.+)[/]/;
		const fileID = this.images[this.state.activeImage].match(regex)[1];
		const fileURL = `https://drive.google.com/uc?id=${fileID}&export=download`;

		return (
			<div className="carousel">
				{this.state.activeImage > 0 ? leftArrow : <span></span>}

				<img src={fileURL} alt={`Image ${this.state.activeImage}`} style={{gridColumn: "1 / -1", gridRow: "1 / -1"}}></img>

				{this.state.activeImage < this.images.length - 1 ? rightArrow : <span></span>}
			</div>
		);
	}
}


class ProductCard extends React.Component {
	constructor(props) {
		super(props);

		this.state = {isActive: true};

		/**
		 * @type {string}
		 */
		this.productName = this.props.itemName;

		/**
		 * @type {string[]}
		 */
		this.description = this.props.itemDescription;

		/**
		 * @type {number}
		 */
		this.price = this.props.itemPrice;

		/**
		 * @type {string[]}
		 */
		this.images = this.props.itemImages;
	}

	changeFocus() {
		// 
	}

	render() {
		return (
			<div className="product-card">
				<i className="back-arrow fas fa-backspace"></i>
				<span className="product-name">{this.productName}</span>

				<ImageCarousel images={this.images}></ImageCarousel>

				<div className="product-content">
					<ul className="bullets">
						{this.description.map((bullet, i) => <li key={`${this.productName}-bullet-${i}`}>{bullet}</li>)}
					</ul>

					<span className="price">{`$${this.price.toFixed(2)}`}</span>
					<button className="add-to-cart">Add to Cart</button>
				</div>
			</div>
		);
	}
}


function initializeMarketplace() {
	/**
	 * @typedef {object} ProductModel
	 * @property {string} _id - unique identifier generated by MongoDB
	 * @property {string} name - product name
	 * @property {number} price - price of product
	 * @property {string[]} description - list of bullet points about the product
	 * @property {string[]} images - list of Google Drive links to product images
	 */

	fetch('/api/products').then(
		response => response.json()
	).then(/** @param {ProductModel[]} data */ (data) => {
		ReactDOM.render(
			<React.Fragment>
				{
					data.map(
						obj => {
							const { _id, name, price, description, images } = obj;
							return <ProductCard key={_id} itemName={name} itemPrice={price} itemDescription={description} itemImages={images}></ProductCard>
						}
					)
				}
			</React.Fragment>
		, document.getElementById('shopping'));
	});
}

initializeMarketplace();
